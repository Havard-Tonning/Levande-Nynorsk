import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.HashMap;
import java.util.HashSet;

import static java.lang.Character.isUpperCase;

public class Translate {
    public Translate(String input) {
        HashSet<String> names = ReadNames();
        String translatedSentence = "";

        String[] inputArray = input.split("((?<=\\\\s)|(?=\\\\s))|((?<=[^a-zA-Zæøåòèê0-9])|(?=[^a-zA-Zæøåòèê0-9]))"); // Generated by Gemini

        HashMap<String, String> translations = ReadTranslations();

        for (String word : inputArray) {
            System.out.println(word);
            boolean capital = false;
            if(isUpperCase(word.charAt(0))){
                capital = true;
            }
        }


    }

    public static HashSet<String> ReadNames() {
        HashSet<String> names = new HashSet<String>();


        try (BufferedReader reader = new BufferedReader(new FileReader("src/names.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                if (line.trim().isEmpty()) {
                    continue;
                }

                String[] words = line.trim().split("\\s+");

                for (String word : words) {
                    if (word != null && !word.isEmpty()) {
                        names.add(word);
                    }
                }
            }
        } catch (IOException e) {
            System.err.println("Error reading file: " + e.getMessage());
        }
        return names;
    }

    public static HashMap<String, String> ReadTranslations() {
        HashMap<String, String> translations = new HashMap<>();

        try (BufferedReader reader = new BufferedReader(new FileReader("src/pairs.csv"))) {
            String line;

            while ((line = reader.readLine()) != null)
                if (line.trim().isEmpty()) {
                    continue;
                }

            String[] pair = line.split("\t");

            translations.put(pair[0], pair[1]);

        } catch (IOException ex) {
            throw new RuntimeException(ex);


        }

        return translations;

    }
}

